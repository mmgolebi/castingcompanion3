generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(cuid())
  name               String?
  email              String             @unique
  password           String
  role               Role               @default(ACTOR)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  subscriptionStatus String?            @default("inactive")
  stripeCustomerId   String?
  resetToken         String?            @unique
  resetTokenExpiry   DateTime?
  headshotAnalyses   HeadshotAnalysis[]
  profile            Profile?

  @@map("User")
}

model Profile {
  id                     String       @id @default(cuid())
  userId                 String       @unique
  profileSlug            String?      @unique
  isPublic               Boolean      @default(false)
  phone                  String?
  age                    Int?
  playableAgeMin         Int?
  playableAgeMax         Int?
  gender                 String?
  ethnicity              String?
  unionStatus            String?
  height                 Int?
  weight                 Int?
  hairColor              String?
  eyeColor               String?
  visibleTattoos         Boolean      @default(false)
  headshot               String?
  fullBodyPhoto          String?
  resume                 String?
  city                   String?
  state                  String?
  zipCode                String?
  availability           String?
  reliableTransportation Boolean      @default(false)
  travelWilling          Boolean      @default(false)
  compensationPreference String?
  compensationMin        String?
  skills                 String[]     @default([])
  roleTypesInterested    String[]     @default([])
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  user                   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissions            Submission[]

  @@map("Profile")
}

model CastingCall {
  id                 String       @id @default(cuid())
  title              String
  production         String
  description        String
  roleType           String
  location           String
  compensation       String
  submissionDeadline DateTime
  shootingDates      String?
  ageRangeMin        Int?
  ageRangeMax        Int?
  gender             String?
  ethnicity          String?
  unionStatus        String
  castingEmail       String
  featuredImage      String?
  status             String       @default("ACTIVE")
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  submissions        Submission[]

  @@map("CastingCall")
}

model Submission {
  id               String      @id @default(cuid())
  profileId        String
  castingCallId    String
  matchScore       Int         @default(0)
  submissionMethod String      @default("MANUAL")
  status           String      @default("PENDING")
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  castingCall      CastingCall @relation(fields: [castingCallId], references: [id], onDelete: Cascade)
  profile          Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, castingCallId])
  @@map("Submission")
}

model HeadshotAnalysis {
  id                String   @id @default(cuid())
  userId            String
  imageUrl          String
  overallScore      Int
  lightingScore     Int
  compositionScore  Int
  expressionScore   Int
  professionalScore Int
  backgroundScore   Int
  strengths         String[]
  improvements      String[]
  detailedFeedback  String
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("HeadshotAnalysis")
}

enum Role {
  ADMIN
  ACTOR
}
