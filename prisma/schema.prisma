generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  phone     String?
  city      String?
  state     String?
  zipCode   String?
  age       Int?
  playableAgeMin Int?
  playableAgeMax Int?
  gender    String?
  height    Int?
  weight    Int?
  ethnicity String?
  hairColor String?
  eyeColor  String?
  visibleTattoos Boolean @default(false)
  
  headshot  String?
  fullBody  String?
  resume    String?
  demoReel  String?
  
  unionStatus String?
  skills      String[]
  roleTypesInterested String[]
  comfortLevels String[]
  compensationMin String?
  compensationPreference String?
  
  availability String?
  reliableTransportation Boolean @default(false)
  travelWilling Boolean @default(false)
  
  stripeCustomerId String?
  stripeSubId      String?
  subStatus        String   @default("TRIAL")
  trialEndsAt      DateTime?
  
  resetToken   String?
  resetExpires DateTime?
  
  isAdmin      Boolean  @default(false)
  
  onboardingStep     Int      @default(1)
  onboardingComplete Boolean  @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submissions Submission[]
  passwordResetTokens PasswordResetToken[]
}

model CastingCall {
  id                  String   @id @default(cuid())
  title               String
  production          String
  description         String
  roleType            String
  genderReq           String
  ageMin              Int
  ageMax              Int
  ethnicityReq        String   @default("ANY")
  location            String
  compensation        String
  unionReq            String
  skillsRequired      String[]
  shootDates          String
  castingEmail        String
  submissionDeadline  DateTime
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submissions Submission[]
}

model Submission {
  id        String   @id @default(cuid())
  userId    String
  callId    String
  status    String   @default("SENT")
  method    String
  matchScore Int?
  castingEmail String
  
  createdAt DateTime @default(now())
  
  user User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  call CastingCall @relation(fields: [callId], references: [id], onDelete: Cascade)
  
  @@unique([userId, callId])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}
