generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  role          Role      @default(ACTOR)
  profile       Profile?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  subscriptionStatus String? @default("inactive")
  stripeCustomerId String?
  resetToken    String?   @unique
  resetTokenExpiry DateTime?
}

model Profile {
  id                    String   @id @default(cuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  profileSlug           String?  @unique
  isPublic              Boolean  @default(false)
  
  phone                 String?
  age                   Int?
  playableAgeMin        Int?
  playableAgeMax        Int?
  gender                Gender?
  ethnicity             Ethnicity?
  unionStatus           UnionStatus?
  
  height                Int?
  weight                Int?
  hairColor             String?
  eyeColor              String?
  visibleTattoos        Boolean  @default(false)
  
  headshot              String?
  fullBodyPhoto         String?
  resume                String?
  
  city                  String?
  state                 String?
  zipCode               String?
  availability          String?
  reliableTransportation Boolean @default(false)
  travelWilling         Boolean  @default(false)
  compensationPreference String?
  compensationMin       String?
  
  skills                String[]
  roleTypesInterested   String[]
  
  submissions           Submission[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model CastingCall {
  id                  String       @id @default(cuid())
  title               String
  production          String
  description         String
  roleType            String
  location            String
  compensation        String
  submissionDeadline  DateTime
  shootingDates       String?
  
  ageRangeMin         Int?
  ageRangeMax         Int?
  gender              String?
  ethnicity           String?
  unionStatus         String
  
  castingEmail        String
  featuredImage       String?
  status              String       @default("ACTIVE")
  
  submissions         Submission[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

model Submission {
  id                String         @id @default(cuid())
  profileId         String
  profile           Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  castingCallId     String
  castingCall       CastingCall    @relation(fields: [castingCallId], references: [id], onDelete: Cascade)
  
  submissionMethod  String
  matchScore        Int
  status            String         @default("PENDING")
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  @@unique([profileId, castingCallId])
}

enum Role {
  ACTOR
  CASTING_DIRECTOR
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
}

enum Ethnicity {
  WHITE
  BLACK
  HISPANIC
  ASIAN
  NATIVE_AMERICAN
  MIDDLE_EASTERN
  PACIFIC_ISLANDER
  MIXED
  OTHER
}

enum UnionStatus {
  SAG_AFTRA
  AEA
  AGVA
  ACTRA
  NON_UNION
  ELIGIBLE
  UNION
  EITHER
}
