generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  phone     String?
  city      String?
  state     String?
  zipCode   String?
  age       Int?
  playableAgeMin Int?
  playableAgeMax Int?
  gender    String?
  height    Int?
  weight    Int?
  ethnicity String?
  hairColor String?
  eyeColor  String?
  visibleTattoos Boolean @default(false)
  
  headshot  String?
  fullBody  String?
  resume    String?
  demoReel  String?
  
  unionStatus String?
  skills      String[]
  roleTypesInterested String[]
  comfortLevels String[]
  
  availability String?
  reliableTransportation Boolean @default(false)
  travelWilling Boolean @default(false)
  compensationPreference String?
  compensationMin String?
  
  stripeCustomerId String?
  stripeSubId      String?
  subStatus        String?
  trialEndsAt      DateTime?
  
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  submissions Submission[]
}

model CastingCall {
  id                  String   @id @default(cuid())
  title               String
  production          String
  description         String   @db.Text
  roleType            String
  location            String
  compensation        String
  submissionDeadline  DateTime
  shootingDates       String?
  ageRangeMin         Int?
  ageRangeMax         Int?
  gender              String?
  ethnicity           String?
  unionStatus         String?
  castingEmail        String
  featuredImage       String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  submissions Submission[]
}

model Submission {
  id            String   @id @default(cuid())
  userId        String
  callId        String
  status        String   @default("SENT")
  method        String
  matchScore    Int?
  castingEmail  String
  createdAt     DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  call CastingCall @relation(fields: [callId], references: [id], onDelete: Cascade)
  
  @@unique([userId, callId])
}
